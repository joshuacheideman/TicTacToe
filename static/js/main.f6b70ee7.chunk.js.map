{"version":3,"sources":["../tictactoe/src/Cell.js","../tictactoe/src/GameMessage.js","../tictactoe/src/CheckWin.js","../tictactoe/src/AI.js","../tictactoe/src/Grid.js","../tictactoe/src/App.js","../tictactoe/src/serviceWorker.js","../tictactoe/src/index.js"],"names":["Cell","symbol","this","props","cell","position","size","adjustedCellStyle","width","height","fontSize","Math","floor","undefined","gameEnded","react_default","a","createElement","className","style","onClick","setSymbol","bind","React","Component","GameMessage","message","retry","messageblock","Grid","resetGrid","gameCondition","CheckWin","symbols","latestMove","selectedX","diagonal1","diagonal2","i","horizontals","verticals","j","horizontalV","validateWin","verticalV","diagonalV1","diagonalV2","filter","length","pow","direction","repeat","AI","curX","playerX","_this$randomAI","randomAI","_this$randomAI2","Object","slicedToArray","_this$advancedAI","advancedAI","_this$advancedAI2","won","gameEnd","switchPlayer","choices","getRemainingTiles","random","get","key","Map","set","_this$minimax","minimax","depth","heuristic","maxPlayer","checkHeuristic","value","node","children","Infinity","childkey","max","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","child","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","min","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","Array","boardSize","xsTurn","assertThisInitialized","playerAI","table","counter","push","src_Cell_0","cellId","e","setState","makeGrid","src_GameMessage_0","App","selectedPiece","validation","changeSize","grid","piece","event","_this2","target","parseInt","SelectX","setPiece","SelectO","SelectMessage","Select","src_Grid_0","onChange","type","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f6b70ee7.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Cell.css\";\r\n\r\nclass Cell extends React.Component{\r\n    render()\r\n    {\r\n        let symbol = this.props.symbol;\r\n        let cell= [];\r\n        let position = this.props.position;\r\n        let size = this.props.size;\r\n        const adjustedwidth = (60/size)+\"%\";\r\n        const adjustedheight = (300/size)+\"px\";\r\n        const adjustedfontSize = Math.floor(250/size)+\"px\";\r\n        const adjustedCellStyle= {width:adjustedwidth,height:adjustedheight,fontSize:adjustedfontSize};\r\n        if(symbol===undefined&&!this.props.gameEnded)\r\n        {\r\n                cell =<td style={adjustedCellStyle} \r\n                    className=\"clickable\" \r\n                    onClick={this.props.setSymbol.bind(this,position)}>\r\n                    </td>\r\n        }\r\n        else switch(symbol)\r\n        {\r\n            case \"X\":\r\n                cell = <td className=\"X\" style={adjustedCellStyle}>X</td>\r\n                break;\r\n            case \"O\":\r\n                cell = <td className=\"O\" style={adjustedCellStyle}>O</td>\r\n                break;\r\n            default:\r\n                cell = <td style={adjustedCellStyle}>{symbol}</td>;\r\n        }\r\n        return(    \r\n            cell\r\n        ) \r\n    };\r\n}\r\n\r\nexport default Cell;","import React from 'react';\r\nimport \"./GameMessage.css\";\r\nimport Grid from \"./Grid.js\";\r\n\r\nclass GameMessage extends React.Component{\r\n    \r\n    render()\r\n    {\r\n        let message;\r\n        let messageblock=null;\r\n        let retry;\r\n        if(this.props.gameEnded===true)\r\n        {\r\n            retry = <button className=\"retry\" onClick={Grid.resetGrid}><span>Reset</span></button>;\r\n            switch(this.props.gameCondition)\r\n            {\r\n                case 0:\r\n                    message = <h2>You lost.</h2>;\r\n                    break;\r\n                case 10:\r\n                    message = <h2>You tied.</h2>;\r\n                    break;\r\n                case 20:\r\n                    message = <h2>You Won.</h2>; \r\n                    break;\r\n                default:\r\n                    message = \"\";\r\n                    retry = \"\";\r\n            }\r\n            messageblock = <div className=\"gameMessage\">\r\n                        {message}\r\n                        {retry}\r\n                    </div>\r\n        }\r\n        return(\r\n            messageblock\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameMessage;\r\n","    class CheckWin\r\n    {\r\n        //check to see if you won,lost,or tied\r\n        //Lost = 0, Tied = 1, Won = 2\r\n        static gameEnd(symbols,latestMove,selectedX,size)\r\n        {\r\n            let diagonal1 = \"\";\r\n            let diagonal2 = \"\";\r\n\r\n            for(let i=0;i<size;i++)\r\n            {\r\n                //diagonals\r\n                diagonal1 += symbols[(size+1)*i];\r\n                diagonal2 += symbols[(size-1)*i+(size-1)];\r\n\r\n                let horizontals = \"\";\r\n                let verticals = \"\";\r\n                for(let j=0;j<size;j++)\r\n                {\r\n                    //horizontals\r\n                    horizontals += symbols[size*i+j];\r\n                    //verticals\r\n                    verticals += symbols[i+size*j];\r\n                }\r\n                //check to see if horizontals,and verticals have n in a row\r\n                let horizontalV = this.validateWin(horizontals,latestMove,selectedX,size);\r\n                let verticalV = this.validateWin(verticals,latestMove, selectedX,size);\r\n                if(horizontalV!==undefined)\r\n                    return horizontalV;\r\n                if(verticalV !==undefined)\r\n                    return verticalV;\r\n            }\r\n            //check to see if diagonals have n in a row\r\n            let diagonalV1 = this.validateWin(diagonal1,latestMove,selectedX,size);\r\n            let diagonalV2 = this.validateWin(diagonal2,latestMove,selectedX,size);\r\n            \r\n            if(diagonalV1 !==undefined)\r\n                return diagonalV1;\r\n            if(diagonalV2 !==undefined)\r\n                return diagonalV2;\r\n            \r\n            //check for tie\r\n            if(symbols.filter(symbol => (symbol==='X'||symbol==='O')).length===Math.pow(size,2))\r\n                return 10;\r\n\r\n            return undefined;\r\n        }\r\n\r\n        //check to see if the we have three in a row\r\n        static validateWin(direction,latestMove,selectedX,size)\r\n        {\r\n            if(direction===\"X\".repeat(size)||direction===\"O\".repeat(size))\r\n                {\r\n\r\n                    //Win if not your turn\r\n                    if((!latestMove && selectedX)||(latestMove && !selectedX))\r\n                    {\r\n                        return 20;\r\n                    }\r\n                    //Loss if it is your turn\r\n                    else\r\n                    {\r\n                        return 0;\r\n                    }\r\n                }\r\n            return undefined;\r\n        }\r\n    }\r\n    export default CheckWin;","import CheckWin from \"./CheckWin.js\";\r\nimport Grid from \"./Grid.js\";\r\n\r\nclass AI\r\n{\r\n    //select minimax if board size is 3 otherwise pure random\r\n    static playerAI(symbols,curX,size,playerX)\r\n    {\r\n        if((!curX&&playerX)||(curX&&!playerX))\r\n        {\r\n           if(size!==3)\r\n           {\r\n                [symbols,curX] = this.randomAI(symbols,curX,size);\r\n           }\r\n            else\r\n            {\r\n                [symbols,curX] = this.advancedAI(symbols,curX,size,playerX);\r\n            }\r\n        }\r\n        let won = CheckWin.gameEnd(symbols,curX,playerX,size);\r\n        Grid.switchPlayer(symbols,curX,won);\r\n        return;\r\n    }\r\n\r\n    //get all the available choices and from those choices select random\r\n    static randomAI(symbols,curX,size)\r\n    {\r\n        let choices;\r\n        choices = this.getRemainingTiles(symbols,size);\r\n        let random = Math.floor(Math.random()*choices.size);\r\n        symbols[choices.get(random).key] = (curX) ? \"X\": \"O\";\r\n        curX = !curX;\r\n        return [symbols,curX];\r\n    }\r\n\r\n    //figure out how many open tiles there are\r\n    static getRemainingTiles(symbols,size)\r\n    {\r\n        let choices = new Map();\r\n        for(let i=0;i<Math.pow(size,2);i++)\r\n        {\r\n            if(symbols[i]!=='X'&&symbols[i]!=='O')\r\n            {\r\n                choices.set(choices.size,{key:i});\r\n            }\r\n        }\r\n        return choices;\r\n    }\r\n    \r\n    static advancedAI(symbols,curX,size,playerX)\r\n    {\r\n        let node = {};\r\n        let choices = {};\r\n        choices = this.getRemainingTiles(symbols,size);\r\n        node.children = choices;\r\n\r\n        let [,choosenKey] = this.minimax(choices.size,true,symbols,curX,size,playerX);\r\n        symbols[choosenKey] = (curX) ? \"X\": \"O\";\r\n        curX = !curX;\r\n        return [symbols,curX];\r\n    }\r\n\r\n    //checks to see if won and get heuristic from score.\r\n    static checkHeuristic(symbols,curX,playerX,depth)\r\n    {\r\n        //check if some ending condition occurred return heuristic\r\n        let heuristic = CheckWin.gameEnd(symbols,curX,playerX,3);\r\n         //adding this to heuristic makes it so defence counters you more\r\n        if((curX||!playerX)&&(!curX||playerX)&&heuristic===20)\r\n            return heuristic+depth;\r\n        return heuristic;\r\n    }\r\n\r\n    static minimax(depth,maxPlayer,symbols,curX,size,playerX)\r\n    {   \r\n        //check heuristic\r\n        let heuristic = this.checkHeuristic(symbols,!curX,playerX,depth);\r\n        if(heuristic!==undefined)\r\n        {\r\n            return [heuristic];\r\n        }\r\n        let node = {};\r\n        let choices = {};\r\n        choices = this.getRemainingTiles(symbols,size);\r\n        node.children = choices;\r\n        let value;\r\n        if(maxPlayer)\r\n        {\r\n            value = -Infinity;\r\n            let max = -Infinity;\r\n            let childkey;\r\n            for (let child of node.children)\r\n            {\r\n                symbols[child[1].key] = ((maxPlayer&&playerX)||(!maxPlayer&&!playerX)) ? \"O\" : \"X\";\r\n                \r\n                value = Math.max(value,this.minimax(depth-1,false,symbols,!curX,size,playerX)[0])\r\n                \r\n                //get the keypair for the maximum tile and return it up the stack.\r\n                if(max<value){\r\n                    max = value;\r\n                    childkey = child[1].key;\r\n                }\r\n                symbols[child[1].key] = undefined;\r\n            }\r\n            return [value,childkey];\r\n        }else{\r\n            value = Infinity;\r\n            for (let child of node.children)\r\n            {\r\n                symbols[child[1].key] = ((maxPlayer&&playerX)||(!maxPlayer&&!playerX)) ? \"O\" : \"X\";\r\n\r\n                value = Math.min(value,this.minimax(depth-1,true,symbols,!curX,size,playerX)[0]);\r\n\r\n                symbols[child[1].key] = undefined;\r\n\r\n            }\r\n            return [value];\r\n        }\r\n    }\r\n}\r\nexport default AI;","import React from 'react';\r\nimport './Grid.css';\r\nimport Cell from \"./Cell.js\";\r\nimport GameMessage from \"./GameMessage.js\"\r\nimport CheckWin from \"./CheckWin.js\";\r\nimport AI from \"./AI.js\";\r\n\r\nclass Grid extends React.Component{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            symbols: new Array(Math.pow(this.props.boardSize,2)),\r\n            gameEnded: false\r\n        };\r\n\r\n        //tells if you won,lost, or tied\r\n        this.gameCondition = undefined;\r\n        \r\n        //tells us if x is current turn\r\n        this.xsTurn = Math.floor(Math.random()*2)===0?false: true;\r\n\r\n        //bind to the component so state is not null in function\r\n        this.setSymbol = this.setSymbol.bind(this);\r\n        Grid.switchPlayer = Grid.switchPlayer.bind(this);\r\n        Grid.resetGrid = Grid.resetGrid.bind(this);\r\n    }\r\n    componentDidMount()\r\n    {\r\n        AI.playerAI(this.state.symbols,this.xsTurn,this.props.boardSize,this.props.playerX);\r\n    }\r\n    //This function programatically makes the table for us instead of hard coding it\r\n    makeGrid()\r\n    {\r\n        let table = [];\r\n        let counter = 0;\r\n        for(let i=0;i<this.props.boardSize;i++)\r\n        {\r\n            //inner loop to create children elements\r\n            let children = [];\r\n\r\n            for(let j=0;j<this.props.boardSize;j++)\r\n            {\r\n                children.push(<Cell \r\n                    key = {\"Cell-\"+counter} \r\n                    symbol= {this.state.symbols[counter]} \r\n                    setSymbol={this.setSymbol} \r\n                    position= {counter} \r\n                    gameEnded= {this.state.gameEnded}\r\n                    size = {this.props.boardSize}\r\n                    >\r\n                </Cell>)\r\n                counter++;\r\n            }\r\n            //combine all children elements with the parent elements\r\n            table.push(<tr key={\"tr-\"+i}>{children}</tr>);\r\n        }\r\n        return table;\r\n    }\r\n\r\n    //This function alternates between X's and O's when clicking on a tile.\r\n    setSymbol(cellId,e)\r\n    {\r\n        let symbols = this.state.symbols;\r\n        let curX = this.xsTurn;\r\n        if(curX===true)\r\n            symbols[cellId] = \"X\";\r\n        else\r\n            symbols[cellId] = \"O\";\r\n        \r\n        curX = !curX;\r\n        this.xsTurn = curX;\r\n        this.setState(({symbols: symbols}));\r\n        let won = CheckWin.gameEnd(symbols,curX,this.props.playerX,this.props.boardSize);\r\n        \r\n        if(won===undefined)\r\n            AI.playerAI(symbols,curX,this.props.boardSize,this.props.playerX);\r\n        else\r\n        {\r\n            this.gameCondition = won;\r\n            this.setState({gameEnded:true});\r\n        }\r\n    }\r\n    \r\n    static resetGrid()\r\n    {\r\n        let symbols = new Array(Math.pow(this.props.boardSize,2));\r\n        this.setState({\r\n            symbols: symbols,\r\n            gameEnded: false\r\n        });\r\n        this.gameCondition = undefined;\r\n        this.xsTurn = Math.floor(Math.random()*2)===0?false: true;\r\n        AI.playerAI(symbols,this.xsTurn,this.props.boardSize,this.props.playerX);\r\n    }\r\n    \r\n    static switchPlayer(symbols,curX,won)\r\n    {\r\n        this.setState({symbols:symbols});\r\n        this.xsTurn = curX;\r\n\r\n        if(won!==undefined)\r\n        {\r\n            this.gameCondition = won;\r\n            this.setState({gameEnded:true});\r\n        }\r\n    }\r\n    render()\r\n    {\r\n        return (\r\n    <main className=\"Grid-main\">\r\n        <table className=\"Grid-table\">\r\n            <tbody>\r\n                {this.makeGrid()}\r\n            </tbody>\r\n        </table>\r\n        <GameMessage \r\n            gameEnded={this.state.gameEnded} \r\n            gameCondition={this.gameCondition} \r\n            resetGrid = {Grid.resetGrid}></GameMessage>\r\n    </main>\r\n        )\r\n    };\r\n}\r\n\r\nexport default Grid;","import React from 'react';\r\nimport Grid from './Grid.js';\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            selectedPiece:false,\r\n            playerX:null,\r\n            boardSize: 3,\r\n            validation:null\r\n        }\r\n        this.changeSize = this.changeSize.bind(this);\r\n        this.grid = null;\r\n    }\r\n    //set players piece as what they selected on the buttons\r\n    setPiece(piece){\r\n        if(piece==='X')\r\n        {\r\n            this.setState({selectedPiece:true,playerX:true});\r\n            return;\r\n        }\r\n\r\n        this.setState({selectedPiece:true,playerX:false});\r\n        return;\r\n    }\r\n    changeSize(event)\r\n    {\r\n        if(event.target.value!==\"\")\r\n        {\r\n            if(event.target.value>0&&event.target.value<=15)\r\n            {\r\n                //call the resetGrid in callback after setState has finished\r\n                this.setState({boardSize: parseInt(event.target.value),validation:null},()=>{\r\n                    if(this.grid!==null)\r\n                    Grid.resetGrid();\r\n                });\r\n            }\r\n            else\r\n                this.setState({validation: <p className=\"error\">Must be between 1 to 15!</p>});\r\n        }\r\n    }\r\n    render(){\r\n        const SelectX = <button onClick={this.setPiece.bind(this,\"X\")}className=\"selectButton\"><span className=\"X\">X</span></button>;\r\n        const SelectO = <button onClick={this.setPiece.bind(this,\"O\")}className=\"selectButton\"><span className=\"O\">O</span></button>;\r\n        const SelectMessage = <h2>Player 1 Select your Piece</h2>\r\n        let Select = <div className=\"selectPiece\">{SelectMessage}<div className=\"buttonRow\">{SelectX} {SelectO}</div></div>;\r\n\r\n        if(this.state.selectedPiece)\r\n        {\r\n            this.grid = <Grid playerX={this.state.playerX} boardSize={this.state.boardSize}></Grid>; \r\n            Select = null;\r\n        }\r\n        return(\r\n            <div className=\"App-Main\">\r\n                <form className=\"sizeForm\" onChange={this.changeSize}>\r\n                    Grid size:\r\n                    <input type=\"text\" placeholder=\"Accepted values: 1-15\"/>\r\n                </form>\r\n                {this.state.validation}\r\n                {Select}\r\n                {this.grid}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}